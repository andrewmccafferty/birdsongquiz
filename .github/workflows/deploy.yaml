name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"
on:
  push: 
    branches:
    - main
  pull_request:
    branches:
    - main
    paths:
    - terraform/**

permissions:
      id-token: write
      contents: read

env: 
  TF_LOG: ""
  AWS_REGION: eu-west-2
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::133351920298:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2
          terraform_wrapper: false
      
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
      - name: Set environment name from branch for ephemeral deploys
        if: github.event_name == 'pull_request'
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          ENV_NAME="${BRANCH_NAME#*/}"
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
      - name: Set environment name to "prod" for main branch
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "ENV_NAME=prod" >> $GITHUB_ENV
      - name: Terraform create workspace for ephemeral deploys
        if: github.event_name == 'pull_request'
        run: terraform workspace select -or-create $ENV_NAME

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -var environment=$ENV_NAME
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve -input=false -var environment=$ENV_NAME
      # - name: Debug raw terraform output
      #   run: terraform output -raw frontend_bucket
      # - name: Set and echo FRONTEND_BUCKET env var
      #   run: |
      #     set -e
      #     BUCKET=$(terraform output -raw frontend_bucket)
      #     echo "Setting bucket: $BUCKET"
      #     echo "FRONTEND_BUCKET=$BUCKET" >> "$GITHUB_ENV"
      # - name: Set and echo API_ROOT env var
      #   run: |
      #     set -e
      #     ROOT_URL=$(terraform output -raw api_base_url)
      #     echo "API_ROOT=$ROOT_URL" >> "$GITHUB_ENV"
      # - name: Deploy frontend
      #   working-directory: ./frontend
      #   if: github.event_name == 'pull_request'
      #   run: ./deploy.sh