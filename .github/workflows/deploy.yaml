name: "Deploy full application stack"
on:
  push: 
    branches:
    - main
  pull_request:
    branches:
    - main

permissions:
      id-token: write
      contents: read

env: 
  TF_LOG: ""
  AWS_REGION: eu-west-2
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

jobs:
  terraform:
    name: "Deploy to ephemeral or prod environment"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2
          # This line, turning off the Terraform Wrapper, is important
          # because without it the steps which read TF output will fail,
          # they end up with a load of debug output to filter out.
          terraform_wrapper: false
      
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
      - name: Set environment name from branch for ephemeral deploys
        if: github.event_name == 'pull_request'
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          ENV_NAME="${BRANCH_NAME#*/}"
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
      - name: Set environment name to "prod" for main branch
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "ENV_NAME=prod" >> $GITHUB_ENV
      - name: Terraform create workspace for ephemeral deploys
        if: github.event_name == 'pull_request'
        run: terraform workspace select -or-create $ENV_NAME

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -var environment=$ENV_NAME -var acm_certificate_arn=${{ secrets.ACM_CERTIFICATE_ARN }} -var xc_api_key=${{ secrets.XC_API_KEY }}
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -var environment=$ENV_NAME \
            -var acm_certificate_arn=${{ secrets.ACM_CERTIFICATE_ARN }} \
            -var xc_api_key=${{ secrets.XC_API_KEY }}
      - name: Feed all Terraform output parameters into environment variables
        run: |
          for key in $(terraform output -json | jq -r 'keys[]'); do
            value=$(terraform output -raw "$key" || echo "")
            upper_key=$(echo "$key" | tr '[:lower:]' '[:upper:]')
            echo "$upper_key=$value" >> "$GITHUB_ENV"
          done
      - name: Set FRONTEND_URL name for prod branch
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "FRONTEND_URL=https://www.birdsongquiz.co.uk" >> $GITHUB_ENV
      - name: Populate species lists for ephemerals
        if: github.event_name == 'pull_request'
        working-directory: ./scripts
        run: ./populate-species-list-bucket-from-source.sh
      - name: Set commit hash for version number
        run: echo "CURRENT_APP_VERSION=${{ github.sha }}" >> $GITHUB_ENV
      - name: Deploy frontend
        working-directory: ./frontend
        run: ./deploy.sh
      - name: Install dependencies for tests
        working-directory: ./tests/e2e
        run: npm ci
      - name: Install Playwright Browsers
        working-directory: ./tests/e2e
        run: npx playwright install --with-deps chromium
      - name: Run Playwright tests
        working-directory: ./tests/e2e
        run: npx playwright test
      - name: Plan for prod
        if: github.event_name == 'pull_request'
        run: |
          terraform workspace select default
          terraform plan -var environment=prod -var acm_certificate_arn=${{ secrets.ACM_CERTIFICATE_ARN }} -var xc_api_key=${{ secrets.XC_API_KEY }}